// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array freeList;
    static int SEGMENT_LENGTH, SEGMENT_NEXT;
    static int BLOCK_LENGTH;

    /** Initializes the class. */
    function void init() {
        let SEGMENT_LENGTH = 0;
        let SEGMENT_NEXT = 1;
        let BLOCK_LENGTH = -1;

        let freeList = 2048;
        let freeList[SEGMENT_LENGTH] = 16383 - freeList;
        let freeList[SEGMENT_NEXT] = null;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var Array memory;
        let memory = 0;
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var Array memory;
        let memory = 0;
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array segment, block;

        if (size < 0 | size = 0) {
            do Sys.error(5 /* Memory size to be allocated must be positive */);
        }

        let segment = freeList;
        while ((segment[SEGMENT_LENGTH] - 2 /* length and next area */) < size) {
            if (segment[SEGMENT_NEXT] = null) {
                do Sys.error(6 /* heap overflow */);
            }
            let segment = segment[SEGMENT_NEXT];
        }

        let block = segment + segment[SEGMENT_LENGTH] - size;
        let block[BLOCK_LENGTH] = size + 1 /* length area */;
        let segment[SEGMENT_LENGTH] = segment[SEGMENT_LENGTH] - block[BLOCK_LENGTH];

        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment;

        let segment = o - 1 /* length area */;
        let segment[SEGMENT_LENGTH] = o[BLOCK_LENGTH] - 1 /* next area */;
        let segment[SEGMENT_NEXT] = freeList;
        let freeList = segment;

        return;
    }    
}
